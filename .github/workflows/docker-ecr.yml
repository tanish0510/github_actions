name: Build, Scan, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  # Job 1: Build Docker Image and Push to DockerHub
  build_and_push_dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t my-python-app:latest .

      - name: Tag Docker Image for DockerHub
        run: |
          docker tag my-python-app:latest ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest

      - name: Push to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest

  # Job 2: Scan Docker Image with Trivy
  trivy_scan:
    runs-on: ubuntu-latest
    needs: build_and_push_dockerhub

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: 'latest'

      - name: Run Trivy Scan on Docker Image
        run: |
          trivy image --scanners vuln my-python-app:latest > trivy-report.txt

      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.txt

  # Job 3: Push to ECR if Scan is Successful
  push_to_ecr:
    runs-on: ubuntu-latest
    needs: trivy_scan
    if: success()  # Only run this job if the previous jobs are successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker Image for ECR
        run: |
          docker tag my-python-app:latest ${{ secrets.AWS_ACCESS_KEY_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app:latest

      - name: Push to ECR
        run: |
          docker push ${{ secrets.AWS_ACCESS_KEY_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-python-app:latest

      - name: Success message
        run: echo "Image successfully pushed to ECR!"
